import json

TASKS_FILE = "tasks.json"

def load_tasks():
    try:
        with open(TASKS_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_tasks(tasks):
    with open(TASKS_FILE, "w") as file:
        json.dump(tasks, file)

def add_task(tasks):
    title = input("Enter task title: ")
    description = input("Enter task description: ")
    task = {"id": len(tasks) + 1, "title": title, "description": description, "completed": False}
    tasks.append(task)
    print("Task added successfully!")

def view_tasks(tasks):
    if not tasks:
        print("No tasks found.")
    else:
        for task in tasks:
            status = "Completed" if task["completed"] else "Pending"
            print(f"ID: {task['id']}, Title: {task['title']}, Description: {task['description']}, Status: {status}")

def mark_task_complete(tasks):
    task_id = int(input("Enter task ID to mark as complete: "))
    for task in tasks:
        if task["id"] == task_id:
            task["completed"] = True
            print("Task marked as complete!")
            return
    print("Task not found.")

def delete_task(tasks):
    task_id = int(input("Enter task ID to delete: "))
    tasks[:] = [task for task in tasks if task["id"] != task_id]
    print("Task deleted successfully!")

def main():
    tasks = load_tasks()
    while True:
        print("\nPersonal Task Manager")
        print("1. Add Task")
        print("2. View Tasks")
        print("3. Mark Task as Complete")
        print("4. Delete Task")
        print("5. Exit")
        choice = input("Enter your choice: ")
        if choice == "1":
            add_task(tasks)
        elif choice == "2":
            view_tasks(tasks)
        elif choice == "3":
            mark_task_complete(tasks)
        elif choice == "4":
            delete_task(tasks)
        elif choice == "5":
            save_tasks(tasks)
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()